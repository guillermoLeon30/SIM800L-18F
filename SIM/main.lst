CCS PCH C Compiler, Version 5.070, 56587               30-sep-17 18:31

               Filename:   D:\PIC\SIM800L-18F\SIM\main.lst

               ROM used:   1338 bytes (4%)
                           Largest free fragment is 31426
               RAM used:   70 (3%) at main() level
                           98 (5%) worst case
               Stack used: 13 locations (6 in main + 7 for interrupts)
               Stack size: 31

*
0000:  GOTO   049C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0234
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18f2550.h>	//Tipo de procesador 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
*
0210:  MOVF   FEF,F
0212:  BZ    0232
0214:  MOVFF  FEA,57
0218:  MOVFF  FE9,56
021C:  MOVFF  FEF,58
0220:  RCALL  01C0
0222:  MOVFF  57,FEA
0226:  MOVFF  56,FE9
022A:  INCF   FE9,F
022C:  BTFSC  FD8.2
022E:  INCF   FEA,F
0230:  BRA    0210
0232:  RETURN 0
*
0254:  DATA 41,54
0256:  DATA 0D,00
0258:  DATA 41,54
025A:  DATA 2B,43
025C:  DATA 4D,47
025E:  DATA 46,3D
0260:  DATA 31,0D
0262:  DATA 00,00
0264:  DATA 41,54
0266:  DATA 2B,43
0268:  DATA 4D,47
026A:  DATA 53,3D
026C:  DATA 22,25
026E:  DATA 73,22
0270:  DATA 00,00
*
032E:  TBLRD*+
0330:  MOVF   FF5,F
0332:  BZ    034E
0334:  MOVFF  FF6,4A
0338:  MOVFF  FF7,4B
033C:  MOVF   FF5,W
033E:  BTFSS  F9E.4
0340:  BRA    033E
0342:  MOVWF  FAD
0344:  MOVFF  4A,FF6
0348:  MOVFF  4B,FF7
034C:  BRA    032E
034E:  RETURN 0
0350:  TBLRD*+
0352:  MOVFF  FF6,4B
0356:  MOVFF  FF7,4C
035A:  MOVF   FF5,W
035C:  BTFSS  F9E.4
035E:  BRA    035C
0360:  MOVWF  FAD
0362:  MOVFF  4B,FF6
0366:  MOVFF  4C,FF7
036A:  DECFSZ 4A,F
036C:  BRA    0350
036E:  GOTO   0424 (RETURN)
0372:  MOVF   FEF,F
0374:  BZ    0396
0376:  MOVFF  FEA,4B
037A:  MOVFF  FE9,4A
037E:  MOVF   FEF,W
0380:  BTFSS  F9E.4
0382:  BRA    0380
0384:  MOVWF  FAD
0386:  MOVFF  4B,FEA
038A:  MOVFF  4A,FE9
038E:  INCF   FE9,F
0390:  BTFSC  FD8.2
0392:  INCF   FEA,F
0394:  BRA    0372
0396:  RETURN 0
....................  
.................... #list 
....................  
.................... #use delay(clock=4000000)			//Frecuencia de trabajo 
*
0198:  CLRF   FEA
019A:  MOVLW  59
019C:  MOVWF  FE9
019E:  MOVF   FEF,W
01A0:  BZ    01BE
01A2:  MOVLW  01
01A4:  MOVWF  01
01A6:  CLRF   00
01A8:  DECFSZ 00,F
01AA:  BRA    01A8
01AC:  DECFSZ 01,F
01AE:  BRA    01A6
01B0:  MOVLW  4A
01B2:  MOVWF  00
01B4:  DECFSZ 00,F
01B6:  BRA    01B4
01B8:  BRA    01BA
01BA:  DECFSZ FEF,F
01BC:  BRA    01A2
01BE:  RETURN 0
....................  
.................... #fuses 	EC_IO			//Oscilador externo, RA6=E/S,PLL OFF (CONFIG1H)	 
.................... #fuses 	CPUDIV1			//Postcaler OSC/1, Frec. CPU=4MHz/1=4MHz (CONFIG1L) 
.................... 						//Ciclo de instrucción = 1uS (1/(4000000/4)) 
....................  
.................... #fuses PUT,NOBROWNOUT,NOWDT,NOPBADEN,NOLVP 
....................  
.................... #define LCD_DATA_PORT getenv("SFR:PORTB")  
.................... #include <lcd.c> //No se usa fast_io en la puerta 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00E8:  MOVLW  0F
00EA:  ANDWF  F93,W
00EC:  IORLW  F0
00EE:  MOVWF  F93
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00F0:  BSF    F8A.2
....................    delay_cycles(1); 
00F2:  NOP   
....................    lcd_output_enable(1); 
00F4:  BSF    F8A.0
....................    delay_cycles(1); 
00F6:  NOP   
....................    high = lcd_read_nibble(); 
00F8:  RCALL  00DC
00FA:  MOVFF  01,60
....................        
....................    lcd_output_enable(0); 
00FE:  BCF    F8A.0
....................    delay_cycles(1); 
0100:  NOP   
....................    lcd_output_enable(1); 
0102:  BSF    F8A.0
....................    delay_us(1); 
0104:  NOP   
....................    low = lcd_read_nibble(); 
0106:  RCALL  00DC
0108:  MOVFF  01,5F
....................        
....................    lcd_output_enable(0); 
010C:  BCF    F8A.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
010E:  MOVLW  0F
0110:  ANDWF  F93,W
0112:  MOVWF  F93
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0114:  SWAPF  x60,W
0116:  MOVWF  00
0118:  MOVLW  F0
011A:  ANDWF  00,F
011C:  MOVF   00,W
011E:  IORWF  5F,W
0120:  MOVWF  01
0122:  RETURN 0
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00DC:  MOVF   F81,W
00DE:  MOVWF  00
00E0:  SWAPF  00,W
00E2:  ANDLW  0F
00E4:  MOVWF  01
....................   #endif 
00E6:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0124:  SWAPF  x60,W
0126:  ANDLW  F0
0128:  MOVWF  00
012A:  MOVLW  0F
012C:  ANDWF  F8A,W
012E:  IORWF  00,W
0130:  MOVWF  F8A
....................   #endif 
....................        
....................    delay_cycles(1); 
0132:  NOP   
....................    lcd_output_enable(1); 
0134:  BSF    F8A.0
....................    delay_us(2); 
0136:  BRA    0138
....................    lcd_output_enable(0); 
0138:  BCF    F8A.0
013A:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
013C:  BCF    F93.0
....................    lcd_rs_tris(); 
013E:  BCF    F93.1
....................    lcd_rw_tris(); 
0140:  BCF    F93.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0142:  BCF    F8A.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0144:  RCALL  00E8
0146:  MOVFF  01,5F
014A:  BTFSC  01.7
014C:  BRA    0144
....................    lcd_output_rs(address); 
014E:  BCF    F8A.1
0150:  BTFSC  5D.0
0152:  BSF    F8A.1
....................    delay_cycles(1); 
0154:  NOP   
....................    lcd_output_rw(0); 
0156:  BCF    F8A.2
....................    delay_cycles(1); 
0158:  NOP   
....................    lcd_output_enable(0); 
015A:  BCF    F8A.0
....................    lcd_send_nibble(n >> 4); 
015C:  SWAPF  5E,W
015E:  MOVWF  5F
0160:  MOVLW  0F
0162:  ANDWF  5F,F
0164:  MOVFF  5F,60
0168:  RCALL  0124
....................    lcd_send_nibble(n & 0xf); 
016A:  MOVF   5E,W
016C:  ANDLW  0F
016E:  MOVWF  5F
0170:  MOVWF  x60
0172:  RCALL  0124
0174:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
0272:  MOVLW  28
0274:  MOVWF  47
0276:  MOVLW  0C
0278:  MOVWF  48
027A:  MOVLW  01
027C:  MOVWF  49
027E:  MOVLW  06
0280:  MOVWF  4A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0282:  BCF    F8A.0
....................    lcd_output_rs(0); 
0284:  BCF    F8A.1
....................    lcd_output_rw(0); 
0286:  BCF    F8A.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0288:  MOVLW  0F
028A:  ANDWF  F93,W
028C:  MOVWF  F93
....................   #endif 
....................    lcd_enable_tris(); 
028E:  BCF    F93.0
....................    lcd_rs_tris(); 
0290:  BCF    F93.1
....................    lcd_rw_tris(); 
0292:  BCF    F93.2
0294:  CLRF   19
0296:  BTFSC  FF2.7
0298:  BSF    19.7
029A:  BCF    FF2.7
....................  #endif 
....................      
....................    delay_ms(15); 
029C:  MOVLW  0F
029E:  MOVWF  59
02A0:  RCALL  0198
02A2:  BTFSC  19.7
02A4:  BSF    FF2.7
....................    for(i=1;i<=3;++i) 
02A6:  MOVLW  01
02A8:  MOVWF  46
02AA:  MOVF   46,W
02AC:  SUBLW  03
02AE:  BNC   02D8
02B0:  CLRF   19
02B2:  BTFSC  FF2.7
02B4:  BSF    19.7
02B6:  BCF    FF2.7
....................    { 
....................        lcd_send_nibble(3); 
02B8:  MOVLW  03
02BA:  MOVWF  x60
02BC:  RCALL  0124
02BE:  BTFSC  19.7
02C0:  BSF    FF2.7
02C2:  CLRF   19
02C4:  BTFSC  FF2.7
02C6:  BSF    19.7
02C8:  BCF    FF2.7
....................        delay_ms(5); 
02CA:  MOVLW  05
02CC:  MOVWF  59
02CE:  RCALL  0198
02D0:  BTFSC  19.7
02D2:  BSF    FF2.7
02D4:  INCF   46,F
02D6:  BRA    02AA
02D8:  CLRF   19
02DA:  BTFSC  FF2.7
02DC:  BSF    19.7
02DE:  BCF    FF2.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
02E0:  MOVLW  02
02E2:  MOVWF  x60
02E4:  RCALL  0124
02E6:  BTFSC  19.7
02E8:  BSF    FF2.7
02EA:  CLRF   19
02EC:  BTFSC  FF2.7
02EE:  BSF    19.7
02F0:  BCF    FF2.7
....................    delay_ms(5); 
02F2:  MOVLW  05
02F4:  MOVWF  59
02F6:  RCALL  0198
02F8:  BTFSC  19.7
02FA:  BSF    FF2.7
....................    for(i=0;i<=3;++i) 
02FC:  CLRF   46
02FE:  MOVF   46,W
0300:  SUBLW  03
0302:  BNC   032A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0304:  CLRF   03
0306:  MOVF   46,W
0308:  ADDLW  47
030A:  MOVWF  FE9
030C:  MOVLW  00
030E:  ADDWFC 03,W
0310:  MOVWF  FEA
0312:  MOVFF  FEF,5E
0316:  CLRF   19
0318:  BTFSC  FF2.7
031A:  BSF    19.7
031C:  BCF    FF2.7
031E:  CLRF   5D
0320:  RCALL  013C
0322:  BTFSC  19.7
0324:  BSF    FF2.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0326:  INCF   46,F
0328:  BRA    02FE
032A:  GOTO   04FE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0176:  DECFSZ 5A,W
0178:  BRA    017C
017A:  BRA    0182
....................       address=LCD_LINE_TWO; 
017C:  MOVLW  40
017E:  MOVWF  5B
0180:  BRA    0184
....................    else 
....................       address=0; 
0182:  CLRF   5B
....................       
....................    address+=x-1; 
0184:  MOVLW  01
0186:  SUBWF  59,W
0188:  ADDWF  5B,F
....................    lcd_send_byte(0,0x80|address); 
018A:  MOVF   5B,W
018C:  IORLW  80
018E:  MOVWF  5C
0190:  CLRF   5D
0192:  MOVWF  5E
0194:  RCALL  013C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0196:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
01C0:  MOVF   58,W
01C2:  XORLW  07
01C4:  BZ    01D4
01C6:  XORLW  0B
01C8:  BZ    01DE
01CA:  XORLW  06
01CC:  BZ    01EE
01CE:  XORLW  02
01D0:  BZ    01FA
01D2:  BRA    0204
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01D4:  MOVLW  01
01D6:  MOVWF  59
01D8:  MOVWF  5A
01DA:  RCALL  0176
01DC:  BRA    020E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01DE:  CLRF   5D
01E0:  MOVLW  01
01E2:  MOVWF  5E
01E4:  RCALL  013C
....................                      delay_ms(2); 
01E6:  MOVLW  02
01E8:  MOVWF  59
01EA:  RCALL  0198
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01EC:  BRA    020E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01EE:  MOVLW  01
01F0:  MOVWF  59
01F2:  MOVLW  02
01F4:  MOVWF  5A
01F6:  RCALL  0176
01F8:  BRA    020E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01FA:  CLRF   5D
01FC:  MOVLW  10
01FE:  MOVWF  5E
0200:  RCALL  013C
0202:  BRA    020E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0204:  MOVLW  01
0206:  MOVWF  5D
0208:  MOVFF  58,5E
020C:  RCALL  013C
....................      #endif 
....................    } 
020E:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Habilita las funciones RS232, velocidad a 9600 baudios 
.................... #use rs232(Baud=9600,xmit=PIN_C6, rcv=PIN_C7) 
*
0398:  BTFSS  F9E.4
039A:  BRA    0398
039C:  MOVWF  FAD
039E:  GOTO   046E (RETURN)
.................... #use fast_io (C) 
....................  
.................... void palabra(char *p, char c); 
.................... void mensajeSim800(unsigned char *numero,unsigned char *mensaje ); 
....................  
.................... char dato1[1];			//Variable para almacena el dato recibido 
.................... char dato2[10]; 
.................... char dato3[10]; 
.................... char numero[10] = "423245243"; 
.................... char mensaje[10] = "Hola"; 
....................  
.................... #int_rda			//Vector de interrupción al recibir por el UART 
.................... tratamiento(){	 
.................... 	//disable_interrupts(INT_RDA); 
.................... 	//dato = getc();	//Lee el dato recibido 
.................... 	palabra(dato1, '\r'); 
*
0234:  CLRF   57
0236:  MOVLW  1A
0238:  MOVWF  56
023A:  MOVLW  0D
023C:  MOVWF  58
023E:  RCALL  00AE
.................... 	//gets(dato1); 
.................... 	lcd_putc('\f'); 
0240:  MOVLW  0C
0242:  MOVWF  58
0244:  RCALL  01C0
.................... 	printf(lcd_putc, "%s", dato1); 
0246:  CLRF   FEA
0248:  MOVLW  1A
024A:  MOVWF  FE9
024C:  RCALL  0210
.................... 	 
.................... 	//enable_interrupts(INT_RDA);		//Activa interrupción en la recepción 
024E:  BCF    F9E.5
0250:  GOTO   0060
.................... }	 
....................  
.................... void main(){ 
*
049C:  CLRF   FF8
049E:  BCF    FD0.7
04A0:  BSF    07.7
04A2:  BCF    FB8.3
04A4:  MOVLW  19
04A6:  MOVWF  FAF
04A8:  MOVLW  A6
04AA:  MOVWF  FAC
04AC:  MOVLW  90
04AE:  MOVWF  FAB
04B0:  CLRF   44
04B2:  CLRF   43
04B4:  MOVF   FC1,W
04B6:  ANDLW  C0
04B8:  IORLW  0F
04BA:  MOVWF  FC1
04BC:  MOVLW  07
04BE:  MOVWF  FB4
04C0:  MOVLW  34
04C2:  MOVWF  2F
04C4:  MOVLW  32
04C6:  MOVWF  30
04C8:  MOVLW  33
04CA:  MOVWF  31
04CC:  MOVLW  32
04CE:  MOVWF  32
04D0:  MOVLW  34
04D2:  MOVWF  33
04D4:  MOVLW  35
04D6:  MOVWF  34
04D8:  MOVLW  32
04DA:  MOVWF  35
04DC:  MOVLW  34
04DE:  MOVWF  36
04E0:  MOVLW  33
04E2:  MOVWF  37
04E4:  CLRF   38
04E6:  MOVLW  48
04E8:  MOVWF  39
04EA:  MOVLW  6F
04EC:  MOVWF  3A
04EE:  MOVLW  6C
04F0:  MOVWF  3B
04F2:  MOVLW  61
04F4:  MOVWF  3C
04F6:  CLRF   3D
.................... 	set_tris_c(0b10111111);	//RC7/Rx entrada, RC6/Tx salida	 
04F8:  MOVLW  BF
04FA:  MOVWF  F94
.................... 	//setup_uart(uart_autodetect);	//Activa ciclo de auto detección de baudios 
.................... 	lcd_init(); 
04FC:  BRA    0272
04FE:  CLRF   19
0500:  BTFSC  FF2.7
0502:  BSF    19.7
0504:  BCF    FF2.7
.................... 	//enable_interrupts(INT_RDA);		//Activa interrupción en la recepción 
.................... 	//enable_interrupts(global);		//Habilita interrupciones 
.................... 	 
.................... 	lcd_gotoxy(1,1); 
0506:  MOVLW  01
0508:  MOVWF  59
050A:  MOVWF  5A
050C:  RCALL  0176
050E:  BTFSC  19.7
0510:  BSF    FF2.7
....................  
.................... 	mensajeSim800(numero, mensaje); 
0512:  CLRF   47
0514:  MOVLW  2F
0516:  MOVWF  46
0518:  CLRF   49
051A:  MOVLW  39
051C:  MOVWF  48
051E:  BRA    03A2
....................  
.................... 	char c; 
....................  
.................... 	while(1) 
.................... 	{	 
.................... 		c = getc(); 
0520:  BTFSS  F9E.5
0522:  BRA    0520
0524:  MOVFF  FAE,45
0528:  CLRF   19
052A:  BTFSC  FF2.7
052C:  BSF    19.7
052E:  BCF    FF2.7
.................... 		printf(lcd_putc, "%c", c); 
0530:  MOVFF  45,58
0534:  RCALL  01C0
0536:  BTFSC  19.7
0538:  BSF    FF2.7
053A:  BRA    0520
.................... 	} 
.................... } 
....................  
053C:  SLEEP 
.................... void mensajeSim800(unsigned char *numero, unsigned char *mensaje ){ 
.................... 	printf("AT\r"); 
*
03A2:  MOVLW  54
03A4:  MOVWF  FF6
03A6:  MOVLW  02
03A8:  MOVWF  FF7
03AA:  RCALL  032E
03AC:  CLRF   19
03AE:  BTFSC  FF2.7
03B0:  BSF    19.7
03B2:  BCF    FF2.7
.................... 	palabra(dato1, '\r'); 
03B4:  CLRF   57
03B6:  MOVLW  1A
03B8:  MOVWF  56
03BA:  MOVLW  0D
03BC:  MOVWF  58
03BE:  RCALL  00AE
03C0:  BTFSC  19.7
03C2:  BSF    FF2.7
.................... 	printf(lcd_putc, "%s", dato1); 
03C4:  CLRF   FEA
03C6:  MOVLW  1A
03C8:  MOVWF  FE9
03CA:  CLRF   19
03CC:  BTFSC  FF2.7
03CE:  BSF    19.7
03D0:  BCF    FF2.7
03D2:  RCALL  0210
03D4:  BTFSC  19.7
03D6:  BSF    FF2.7
.................... 	//gets(dato1); 
.................... 	//printf(lcd_putc, "%s", dato1); 
.................... 	delay_ms(1000); 
03D8:  MOVLW  04
03DA:  MOVWF  4A
03DC:  CLRF   19
03DE:  BTFSC  FF2.7
03E0:  BSF    19.7
03E2:  BCF    FF2.7
03E4:  MOVLW  FA
03E6:  MOVWF  59
03E8:  RCALL  0198
03EA:  BTFSC  19.7
03EC:  BSF    FF2.7
03EE:  DECFSZ 4A,F
03F0:  BRA    03DC
.................... 	printf("AT+CMGF=1\r"); 
03F2:  MOVLW  58
03F4:  MOVWF  FF6
03F6:  MOVLW  02
03F8:  MOVWF  FF7
03FA:  RCALL  032E
.................... 	delay_ms(1000); 
03FC:  MOVLW  04
03FE:  MOVWF  4A
0400:  CLRF   19
0402:  BTFSC  FF2.7
0404:  BSF    19.7
0406:  BCF    FF2.7
0408:  MOVLW  FA
040A:  MOVWF  59
040C:  RCALL  0198
040E:  BTFSC  19.7
0410:  BSF    FF2.7
0412:  DECFSZ 4A,F
0414:  BRA    0400
.................... 	printf("AT+CMGS=\"%s\"", numero); 
0416:  MOVLW  64
0418:  MOVWF  FF6
041A:  MOVLW  02
041C:  MOVWF  FF7
041E:  MOVLW  09
0420:  MOVWF  4A
0422:  BRA    0350
0424:  MOVFF  47,FEA
0428:  MOVFF  46,FE9
042C:  RCALL  0372
042E:  MOVLW  22
0430:  BTFSS  F9E.4
0432:  BRA    0430
0434:  MOVWF  FAD
.................... 	printf("\r\n"); 
0436:  MOVLW  0D
0438:  BTFSS  F9E.4
043A:  BRA    0438
043C:  MOVWF  FAD
043E:  MOVLW  0A
0440:  BTFSS  F9E.4
0442:  BRA    0440
0444:  MOVWF  FAD
.................... 	delay_ms(1000); 
0446:  MOVLW  04
0448:  MOVWF  4A
044A:  CLRF   19
044C:  BTFSC  FF2.7
044E:  BSF    19.7
0450:  BCF    FF2.7
0452:  MOVLW  FA
0454:  MOVWF  59
0456:  RCALL  0198
0458:  BTFSC  19.7
045A:  BSF    FF2.7
045C:  DECFSZ 4A,F
045E:  BRA    044A
.................... 	printf("%s", mensaje); 
0460:  MOVFF  49,FEA
0464:  MOVFF  48,FE9
0468:  RCALL  0372
.................... 	putc(26); 
046A:  MOVLW  1A
046C:  BRA    0398
.................... 	delay_ms(1000); 
046E:  MOVLW  04
0470:  MOVWF  4A
0472:  CLRF   19
0474:  BTFSC  FF2.7
0476:  BSF    19.7
0478:  BCF    FF2.7
047A:  MOVLW  FA
047C:  MOVWF  59
047E:  RCALL  0198
0480:  BTFSC  19.7
0482:  BSF    FF2.7
0484:  DECFSZ 4A,F
0486:  BRA    0472
.................... 	printf("\r\n"); 
0488:  MOVLW  0D
048A:  BTFSS  F9E.4
048C:  BRA    048A
048E:  MOVWF  FAD
0490:  MOVLW  0A
0492:  BTFSS  F9E.4
0494:  BRA    0492
0496:  MOVWF  FAD
0498:  GOTO   0520 (RETURN)
.................... } 
....................  
.................... void palabra(char *p, char c){ 
*
00AE:  BTFSS  F9E.5
00B0:  BRA    00AE
00B2:  MOVFF  FAE,59
00B6:  CLRF   5A
.................... 	char dato = getc(); 
.................... 	int i = 0; 
....................  
.................... 	while(dato != c){ 
00B8:  MOVF   58,W
00BA:  SUBWF  59,W
00BC:  BZ    00DA
.................... 		p[i] = dato; 
00BE:  MOVF   5A,W
00C0:  ADDWF  56,W
00C2:  MOVWF  FE9
00C4:  MOVLW  00
00C6:  ADDWFC 57,W
00C8:  MOVWF  FEA
00CA:  MOVFF  59,FEF
.................... 		dato = getc(); 
00CE:  BTFSS  F9E.5
00D0:  BRA    00CE
00D2:  MOVFF  FAE,59
.................... 		i++; 
00D6:  INCF   5A,F
00D8:  BRA    00B8
.................... 	} 
00DA:  RETURN 0
.................... } 

Configuration Fuses:
   Word  1: C427   PLL12 CPUDIV1 USBDIV EC_IO FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8500   CCP2C1 NOPBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
