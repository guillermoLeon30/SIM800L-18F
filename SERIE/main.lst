CCS PCH C Compiler, Version 5.070, 56587               24-sep-17 12:09

               Filename:   D:\PIC\SIM800L-18F\SERIE\main.lst

               ROM used:   1052 bytes (3%)
                           Largest free fragment is 31712
               RAM used:   41 (2%) at main() level
                           63 (3%) worst case
               Stack used: 9 locations (3 in main + 6 for interrupts)
               Stack size: 31

*
0000:  GOTO   0356
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.5
0056:  GOTO   0060
005A:  BTFSC  F9E.5
005C:  GOTO   0208
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18f2550.h>	//Tipo de procesador 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
*
01E2:  MOVF   FEF,F
01E4:  BZ    0204
01E6:  MOVFF  FEA,34
01EA:  MOVFF  FE9,33
01EE:  MOVFF  FEF,35
01F2:  RCALL  0192
01F4:  MOVFF  34,FEA
01F8:  MOVFF  33,FE9
01FC:  INCF   FE9,F
01FE:  BTFSC  FD8.2
0200:  INCF   FEA,F
0202:  BRA    01E2
0204:  GOTO   022E (RETURN)
*
0234:  DATA 41,54
0236:  DATA 2B,43
0238:  DATA 4D,47
023A:  DATA 53,3D
023C:  DATA 3F,0D
023E:  DATA 0A,00
0240:  DATA 41,54
0242:  DATA 2B,43
0244:  DATA 4D,47
0246:  DATA 46,3D
0248:  DATA 31,0D
024A:  DATA 0A,00
024C:  DATA 41,54
024E:  DATA 2B,43
0250:  DATA 4D,47
0252:  DATA 53,3D
0254:  DATA 22,2B
0256:  DATA 35,39
0258:  DATA 33,39
025A:  DATA 35,39
025C:  DATA 39,38
025E:  DATA 34,31
0260:  DATA 31,30
0262:  DATA 22,0D
0264:  DATA 0A,00
0266:  DATA 50,72
0268:  DATA 75,65
026A:  DATA 62,61
026C:  DATA 00,00
*
032A:  TBLRD*+
032C:  MOVF   FF5,F
032E:  BZ    034A
0330:  MOVFF  FF6,28
0334:  MOVFF  FF7,29
0338:  MOVF   FF5,W
033A:  BTFSS  F9E.4
033C:  BRA    033A
033E:  MOVWF  FAD
0340:  MOVFF  28,FF6
0344:  MOVFF  29,FF7
0348:  BRA    032A
034A:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #use delay(clock=4000000)			//Frecuencia de trabajo 
*
016A:  CLRF   FEA
016C:  MOVLW  36
016E:  MOVWF  FE9
0170:  MOVF   FEF,W
0172:  BZ    0190
0174:  MOVLW  01
0176:  MOVWF  01
0178:  CLRF   00
017A:  DECFSZ 00,F
017C:  BRA    017A
017E:  DECFSZ 01,F
0180:  BRA    0178
0182:  MOVLW  4A
0184:  MOVWF  00
0186:  DECFSZ 00,F
0188:  BRA    0186
018A:  BRA    018C
018C:  DECFSZ FEF,F
018E:  BRA    0174
0190:  RETURN 0
....................  
.................... #fuses 	EC_IO			//Oscilador externo, RA6=E/S,PLL OFF (CONFIG1H)	 
.................... #fuses 	CPUDIV1			//Postcaler OSC/1, Frec. CPU=4MHz/1=4MHz (CONFIG1L) 
.................... 						//Ciclo de instrucción = 1uS (1/(4000000/4)) 
....................  
.................... #fuses PUT,NOBROWNOUT,NOWDT,NOPBADEN,NOLVP 
....................  
.................... #define LCD_DATA_PORT getenv("SFR:PORTB")  
.................... #include <lcd.c> //No se usa fast_io en la puerta 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00BA:  MOVLW  0F
00BC:  ANDWF  F93,W
00BE:  IORLW  F0
00C0:  MOVWF  F93
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00C2:  BSF    F8A.2
....................    delay_cycles(1); 
00C4:  NOP   
....................    lcd_output_enable(1); 
00C6:  BSF    F8A.0
....................    delay_cycles(1); 
00C8:  NOP   
....................    high = lcd_read_nibble(); 
00CA:  RCALL  00AE
00CC:  MOVFF  01,3D
....................        
....................    lcd_output_enable(0); 
00D0:  BCF    F8A.0
....................    delay_cycles(1); 
00D2:  NOP   
....................    lcd_output_enable(1); 
00D4:  BSF    F8A.0
....................    delay_us(1); 
00D6:  NOP   
....................    low = lcd_read_nibble(); 
00D8:  RCALL  00AE
00DA:  MOVFF  01,3C
....................        
....................    lcd_output_enable(0); 
00DE:  BCF    F8A.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00E0:  MOVLW  0F
00E2:  ANDWF  F93,W
00E4:  MOVWF  F93
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00E6:  SWAPF  3D,W
00E8:  MOVWF  00
00EA:  MOVLW  F0
00EC:  ANDWF  00,F
00EE:  MOVF   00,W
00F0:  IORWF  3C,W
00F2:  MOVWF  01
00F4:  RETURN 0
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00AE:  MOVF   F81,W
00B0:  MOVWF  00
00B2:  SWAPF  00,W
00B4:  ANDLW  0F
00B6:  MOVWF  01
....................   #endif 
00B8:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00F6:  SWAPF  3D,W
00F8:  ANDLW  F0
00FA:  MOVWF  00
00FC:  MOVLW  0F
00FE:  ANDWF  F8A,W
0100:  IORWF  00,W
0102:  MOVWF  F8A
....................   #endif 
....................        
....................    delay_cycles(1); 
0104:  NOP   
....................    lcd_output_enable(1); 
0106:  BSF    F8A.0
....................    delay_us(2); 
0108:  BRA    010A
....................    lcd_output_enable(0); 
010A:  BCF    F8A.0
010C:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
010E:  BCF    F93.0
....................    lcd_rs_tris(); 
0110:  BCF    F93.1
....................    lcd_rw_tris(); 
0112:  BCF    F93.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0114:  BCF    F8A.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0116:  RCALL  00BA
0118:  MOVFF  01,3C
011C:  BTFSC  01.7
011E:  BRA    0116
....................    lcd_output_rs(address); 
0120:  BCF    F8A.1
0122:  BTFSC  3A.0
0124:  BSF    F8A.1
....................    delay_cycles(1); 
0126:  NOP   
....................    lcd_output_rw(0); 
0128:  BCF    F8A.2
....................    delay_cycles(1); 
012A:  NOP   
....................    lcd_output_enable(0); 
012C:  BCF    F8A.0
....................    lcd_send_nibble(n >> 4); 
012E:  SWAPF  3B,W
0130:  MOVWF  3C
0132:  MOVLW  0F
0134:  ANDWF  3C,F
0136:  MOVFF  3C,3D
013A:  RCALL  00F6
....................    lcd_send_nibble(n & 0xf); 
013C:  MOVF   3B,W
013E:  ANDLW  0F
0140:  MOVWF  3C
0142:  MOVWF  3D
0144:  RCALL  00F6
0146:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
026E:  MOVLW  28
0270:  MOVWF  29
0272:  MOVLW  0C
0274:  MOVWF  2A
0276:  MOVLW  01
0278:  MOVWF  2B
027A:  MOVLW  06
027C:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
027E:  BCF    F8A.0
....................    lcd_output_rs(0); 
0280:  BCF    F8A.1
....................    lcd_output_rw(0); 
0282:  BCF    F8A.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0284:  MOVLW  0F
0286:  ANDWF  F93,W
0288:  MOVWF  F93
....................   #endif 
....................    lcd_enable_tris(); 
028A:  BCF    F93.0
....................    lcd_rs_tris(); 
028C:  BCF    F93.1
....................    lcd_rw_tris(); 
028E:  BCF    F93.2
0290:  CLRF   19
0292:  BTFSC  FF2.7
0294:  BSF    19.7
0296:  BCF    FF2.7
....................  #endif 
....................      
....................    delay_ms(15); 
0298:  MOVLW  0F
029A:  MOVWF  36
029C:  RCALL  016A
029E:  BTFSC  19.7
02A0:  BSF    FF2.7
....................    for(i=1;i<=3;++i) 
02A2:  MOVLW  01
02A4:  MOVWF  28
02A6:  MOVF   28,W
02A8:  SUBLW  03
02AA:  BNC   02D4
02AC:  CLRF   19
02AE:  BTFSC  FF2.7
02B0:  BSF    19.7
02B2:  BCF    FF2.7
....................    { 
....................        lcd_send_nibble(3); 
02B4:  MOVLW  03
02B6:  MOVWF  3D
02B8:  RCALL  00F6
02BA:  BTFSC  19.7
02BC:  BSF    FF2.7
02BE:  CLRF   19
02C0:  BTFSC  FF2.7
02C2:  BSF    19.7
02C4:  BCF    FF2.7
....................        delay_ms(5); 
02C6:  MOVLW  05
02C8:  MOVWF  36
02CA:  RCALL  016A
02CC:  BTFSC  19.7
02CE:  BSF    FF2.7
02D0:  INCF   28,F
02D2:  BRA    02A6
02D4:  CLRF   19
02D6:  BTFSC  FF2.7
02D8:  BSF    19.7
02DA:  BCF    FF2.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
02DC:  MOVLW  02
02DE:  MOVWF  3D
02E0:  RCALL  00F6
02E2:  BTFSC  19.7
02E4:  BSF    FF2.7
02E6:  CLRF   19
02E8:  BTFSC  FF2.7
02EA:  BSF    19.7
02EC:  BCF    FF2.7
....................    delay_ms(5); 
02EE:  MOVLW  05
02F0:  MOVWF  36
02F2:  RCALL  016A
02F4:  BTFSC  19.7
02F6:  BSF    FF2.7
....................    for(i=0;i<=3;++i) 
02F8:  CLRF   28
02FA:  MOVF   28,W
02FC:  SUBLW  03
02FE:  BNC   0326
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0300:  CLRF   03
0302:  MOVF   28,W
0304:  ADDLW  29
0306:  MOVWF  FE9
0308:  MOVLW  00
030A:  ADDWFC 03,W
030C:  MOVWF  FEA
030E:  MOVFF  FEF,3B
0312:  CLRF   19
0314:  BTFSC  FF2.7
0316:  BSF    19.7
0318:  BCF    FF2.7
031A:  CLRF   3A
031C:  RCALL  010E
031E:  BTFSC  19.7
0320:  BSF    FF2.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0322:  INCF   28,F
0324:  BRA    02FA
0326:  GOTO   0382 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0148:  DECFSZ 37,W
014A:  BRA    014E
014C:  BRA    0154
....................       address=LCD_LINE_TWO; 
014E:  MOVLW  40
0150:  MOVWF  38
0152:  BRA    0156
....................    else 
....................       address=0; 
0154:  CLRF   38
....................       
....................    address+=x-1; 
0156:  MOVLW  01
0158:  SUBWF  36,W
015A:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
015C:  MOVF   38,W
015E:  IORLW  80
0160:  MOVWF  39
0162:  CLRF   3A
0164:  MOVWF  3B
0166:  RCALL  010E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0168:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0192:  MOVF   35,W
0194:  XORLW  07
0196:  BZ    01A6
0198:  XORLW  0B
019A:  BZ    01B0
019C:  XORLW  06
019E:  BZ    01C0
01A0:  XORLW  02
01A2:  BZ    01CC
01A4:  BRA    01D6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01A6:  MOVLW  01
01A8:  MOVWF  36
01AA:  MOVWF  37
01AC:  RCALL  0148
01AE:  BRA    01E0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01B0:  CLRF   3A
01B2:  MOVLW  01
01B4:  MOVWF  3B
01B6:  RCALL  010E
....................                      delay_ms(2); 
01B8:  MOVLW  02
01BA:  MOVWF  36
01BC:  RCALL  016A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01BE:  BRA    01E0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01C0:  MOVLW  01
01C2:  MOVWF  36
01C4:  MOVLW  02
01C6:  MOVWF  37
01C8:  RCALL  0148
01CA:  BRA    01E0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01CC:  CLRF   3A
01CE:  MOVLW  10
01D0:  MOVWF  3B
01D2:  RCALL  010E
01D4:  BRA    01E0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01D6:  MOVLW  01
01D8:  MOVWF  3A
01DA:  MOVFF  35,3B
01DE:  RCALL  010E
....................      #endif 
....................    } 
01E0:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Habilita las funciones RS232, velocidad a 9600 baudios 
.................... #use rs232(Baud=9600,xmit=PIN_C6, rcv=PIN_C7) 
*
034C:  BTFSS  F9E.4
034E:  BRA    034C
0350:  MOVWF  FAD
0352:  GOTO   0402 (RETURN)
....................  
.................... #use fast_io (C) 
....................  
.................... char dato[10];		//Variable para almacena el dato recibido 
.................... char c; 
....................  
.................... #int_rda			//Vector de interrupción al recibir por el UART 
.................... tratamiento() 
.................... {	 
.................... 	gets(dato);	//Lee el dato recibido hasta el enter<CR> (13) 
*
0208:  CLRF   FEA
020A:  MOVLW  1A
020C:  MOVWF  FE9
020E:  CLRF   FED
0210:  BTFSS  F9E.5
0212:  BRA    0210
0214:  MOVFF  FAE,FEC
0218:  MOVLW  0D
021A:  SUBWF  FEF,W
021C:  BNZ   0210
021E:  CLRF   FEC
.................... 	//c = getc(); 
.................... 	lcd_putc('\f'); 
0220:  MOVLW  0C
0222:  MOVWF  35
0224:  RCALL  0192
.................... 	printf(lcd_putc, "%s", dato); 
0226:  CLRF   FEA
0228:  MOVLW  1A
022A:  MOVWF  FE9
022C:  BRA    01E2
.................... 	//printf(lcd_putc, "%d", c); 
022E:  BCF    F9E.5
0230:  GOTO   0060
.................... }	 
....................  
.................... void main(){ 
*
0356:  CLRF   FF8
0358:  BCF    FD0.7
035A:  BSF    07.7
035C:  BCF    FB8.3
035E:  MOVLW  19
0360:  MOVWF  FAF
0362:  MOVLW  A6
0364:  MOVWF  FAC
0366:  MOVLW  90
0368:  MOVWF  FAB
036A:  CLRF   26
036C:  CLRF   25
036E:  MOVF   FC1,W
0370:  ANDLW  C0
0372:  IORLW  0F
0374:  MOVWF  FC1
0376:  MOVLW  07
0378:  MOVWF  FB4
037A:  CLRF   27
.................... 	int cont=0; 
.................... 	set_tris_c(0b10111111);	//RC7/Rx entrada, RC6/Tx salida	 
037C:  MOVLW  BF
037E:  MOVWF  F94
.................... 	//setup_uart(uart_autodetect);	//Activa ciclo de auto detección de baudios 
.................... 	lcd_init(); 
0380:  BRA    026E
.................... 	enable_interrupts(INT_RDA);		//Activa interrupción en la recepción 
0382:  BSF    F9D.5
.................... 	enable_interrupts(global);		//Habilita interrupciones 
0384:  MOVLW  C0
0386:  IORWF  FF2,F
.................... 	 
.................... 	printf("AT+CMGS=?\r\n"); //Tiene que responder OK 
0388:  MOVLW  34
038A:  MOVWF  FF6
038C:  MOVLW  02
038E:  MOVWF  FF7
0390:  RCALL  032A
.................... 	delay_ms(1000); 
0392:  MOVLW  04
0394:  MOVWF  28
0396:  CLRF   19
0398:  BTFSC  FF2.7
039A:  BSF    19.7
039C:  BCF    FF2.7
039E:  MOVLW  FA
03A0:  MOVWF  36
03A2:  RCALL  016A
03A4:  BTFSC  19.7
03A6:  BSF    FF2.7
03A8:  DECFSZ 28,F
03AA:  BRA    0396
.................... 	printf("AT+CMGF=1\r\n"); //Modo texto 
03AC:  MOVLW  40
03AE:  MOVWF  FF6
03B0:  MOVLW  02
03B2:  MOVWF  FF7
03B4:  RCALL  032A
.................... 	delay_ms(1000); 
03B6:  MOVLW  04
03B8:  MOVWF  28
03BA:  CLRF   19
03BC:  BTFSC  FF2.7
03BE:  BSF    19.7
03C0:  BCF    FF2.7
03C2:  MOVLW  FA
03C4:  MOVWF  36
03C6:  RCALL  016A
03C8:  BTFSC  19.7
03CA:  BSF    FF2.7
03CC:  DECFSZ 28,F
03CE:  BRA    03BA
.................... 	printf("AT+CMGS=\"+593959984110\"\r\n"); //Numero de telefono 
03D0:  MOVLW  4C
03D2:  MOVWF  FF6
03D4:  MOVLW  02
03D6:  MOVWF  FF7
03D8:  RCALL  032A
.................... 	delay_ms(1000); 
03DA:  MOVLW  04
03DC:  MOVWF  28
03DE:  CLRF   19
03E0:  BTFSC  FF2.7
03E2:  BSF    19.7
03E4:  BCF    FF2.7
03E6:  MOVLW  FA
03E8:  MOVWF  36
03EA:  RCALL  016A
03EC:  BTFSC  19.7
03EE:  BSF    FF2.7
03F0:  DECFSZ 28,F
03F2:  BRA    03DE
.................... 	printf("Prueba"); //Mensaje 
03F4:  MOVLW  66
03F6:  MOVWF  FF6
03F8:  MOVLW  02
03FA:  MOVWF  FF7
03FC:  RCALL  032A
.................... 	putc(26); // CTRL+Z 
03FE:  MOVLW  1A
0400:  BRA    034C
.................... 	delay_ms(1000); 
0402:  MOVLW  04
0404:  MOVWF  28
0406:  CLRF   19
0408:  BTFSC  FF2.7
040A:  BSF    19.7
040C:  BCF    FF2.7
040E:  MOVLW  FA
0410:  MOVWF  36
0412:  RCALL  016A
0414:  BTFSC  19.7
0416:  BSF    FF2.7
0418:  DECFSZ 28,F
041A:  BRA    0406
....................  
.................... 	while(1) 
.................... 	{	 
041C:  BRA    041C
.................... 		 
.................... 	} 
.................... } 
041E:  SLEEP 

Configuration Fuses:
   Word  1: C427   PLL12 CPUDIV1 USBDIV EC_IO FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8500   CCP2C1 NOPBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
